{"version":3,"file":"api_monitor.min.js","sources":["../src/api_monitor.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript for API Monitor\n *\n * @module     local_eventocoursecreation/api_monitor\n * @copyright  2025 Your Name\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['core/chartjs', 'jquery'], function(Chart, $) {\n    \n    /**\n     * Initialize the page\n     *\n     * @param {Object} data - The stats data\n     */\n    const init = function(data) {\n        $(document).ready(function() {\n            if (data && data.stats) {\n                // Prepare data for charts\n                const statsData = prepareStatsData(data.stats);\n                \n                // Initialize charts\n                initializeApiCallsChart(statsData);\n                initializeErrorsChart(statsData);\n            }\n        });\n    };\n    \n    /**\n     * Prepare data for charts\n     *\n     * @param {Object} stats - The stats data by Veranstalter\n     * @return {Object} Prepared data for charts\n     */\n    const prepareStatsData = function(stats) {\n        const labels = [];\n        const apiCalls = [];\n        const errors = [];\n        const cacheHits = [];\n        \n        // Process each Veranstalter\n        for (const veranstalterId in stats) {\n            if (Object.prototype.hasOwnProperty.call(stats, veranstalterId)) {\n                labels.push(veranstalterId);\n                apiCalls.push(stats[veranstalterId].api_calls || 0);\n                errors.push(stats[veranstalterId].errors || 0);\n                cacheHits.push(stats[veranstalterId].cache_hits || 0);\n            }\n        }\n        \n        return {\n            labels: labels,\n            apiCalls: apiCalls,\n            errors: errors,\n            cacheHits: cacheHits\n        };\n    };\n    \n    /**\n     * Initialize API calls chart\n     *\n     * @param {Object} data - Prepared data for charts\n     */\n    const initializeApiCallsChart = function(data) {\n        const ctx = document.getElementById('api-calls-chart');\n        if (!ctx) {\n            return;\n        }\n        \n        new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: data.labels,\n                datasets: [\n                    {\n                        label: M.util.get_string('api_calls', 'local_eventocoursecreation'),\n                        data: data.apiCalls,\n                        backgroundColor: 'rgba(54, 162, 235, 0.5)',\n                        borderColor: 'rgba(54, 162, 235, 1)',\n                        borderWidth: 1\n                    },\n                    {\n                        label: M.util.get_string('api_cache_hits', 'local_eventocoursecreation'),\n                        data: data.cacheHits,\n                        backgroundColor: 'rgba(75, 192, 192, 0.5)',\n                        borderColor: 'rgba(75, 192, 192, 1)',\n                        borderWidth: 1\n                    }\n                ]\n            },\n            options: {\n                responsive: true,\n                title: {\n                    display: true,\n                    text: M.util.get_string('api_calls', 'local_eventocoursecreation')\n                },\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            }\n        });\n    };\n    \n    /**\n     * Initialize errors chart\n     *\n     * @param {Object} data - Prepared data for charts\n     */\n    const initializeErrorsChart = function(data) {\n        const ctx = document.getElementById('errors-chart');\n        if (!ctx) {\n            return;\n        }\n        \n        new Chart(ctx, {\n            type: 'pie',\n            data: {\n                labels: data.labels,\n                datasets: [\n                    {\n                        data: data.errors,\n                        backgroundColor: [\n                            'rgba(255, 99, 132, 0.5)',\n                            'rgba(54, 162, 235, 0.5)',\n                            'rgba(255, 206, 86, 0.5)',\n                            'rgba(75, 192, 192, 0.5)',\n                            'rgba(153, 102, 255, 0.5)',\n                            'rgba(255, 159, 64, 0.5)'\n                        ],\n                        borderColor: [\n                            'rgba(255, 99, 132, 1)',\n                            'rgba(54, 162, 235, 1)',\n                            'rgba(255, 206, 86, 1)',\n                            'rgba(75, 192, 192, 1)',\n                            'rgba(153, 102, 255, 1)',\n                            'rgba(255, 159, 64, 1)'\n                        ],\n                        borderWidth: 1\n                    }\n                ]\n            },\n            options: {\n                responsive: true,\n                title: {\n                    display: true,\n                    text: M.util.get_string('api_errors', 'local_eventocoursecreation')\n                }\n            }\n        });\n    };\n    \n    return {\n        init: init\n    };\n});"],"names":["define","Chart","$","prepareStatsData","stats","labels","apiCalls","errors","cacheHits","veranstalterId","Object","prototype","hasOwnProperty","call","push","api_calls","cache_hits","initializeApiCallsChart","data","ctx","document","getElementById","type","datasets","label","M","util","get_string","backgroundColor","borderColor","borderWidth","options","responsive","title","display","text","scales","y","beginAtZero","initializeErrorsChart","init","ready","statsData"],"mappings":";;;;;;;AAsBAA,gDAAO,CAAC,eAAgB,WAAW,SAASC,MAAOC,SA0BzCC,iBAAmB,SAASC,aACxBC,OAAS,GACTC,SAAW,GACXC,OAAS,GACTC,UAAY,OAGb,MAAMC,kBAAkBL,MACrBM,OAAOC,UAAUC,eAAeC,KAAKT,MAAOK,kBAC5CJ,OAAOS,KAAKL,gBACZH,SAASQ,KAAKV,MAAMK,gBAAgBM,WAAa,GACjDR,OAAOO,KAAKV,MAAMK,gBAAgBF,QAAU,GAC5CC,UAAUM,KAAKV,MAAMK,gBAAgBO,YAAc,UAIpD,CACHX,OAAQA,OACRC,SAAUA,SACVC,OAAQA,OACRC,UAAWA,YASbS,wBAA0B,SAASC,YAC/BC,IAAMC,SAASC,eAAe,mBAC/BF,SAIDlB,MAAMkB,IAAK,CACXG,KAAM,MACNJ,KAAM,CACFb,OAAQa,KAAKb,OACbkB,SAAU,CACN,CACIC,MAAOC,EAAEC,KAAKC,WAAW,YAAa,8BACtCT,KAAMA,KAAKZ,SACXsB,gBAAiB,0BACjBC,YAAa,wBACbC,YAAa,GAEjB,CACIN,MAAOC,EAAEC,KAAKC,WAAW,iBAAkB,8BAC3CT,KAAMA,KAAKV,UACXoB,gBAAiB,0BACjBC,YAAa,wBACbC,YAAa,KAIzBC,QAAS,CACLC,YAAY,EACZC,MAAO,CACHC,SAAS,EACTC,KAAMV,EAAEC,KAAKC,WAAW,YAAa,+BAEzCS,OAAQ,CACJC,EAAG,CACCC,aAAa,QAY3BC,sBAAwB,SAASrB,YAC7BC,IAAMC,SAASC,eAAe,gBAC/BF,SAIDlB,MAAMkB,IAAK,CACXG,KAAM,MACNJ,KAAM,CACFb,OAAQa,KAAKb,OACbkB,SAAU,CACN,CACIL,KAAMA,KAAKX,OACXqB,gBAAiB,CACb,0BACA,0BACA,0BACA,0BACA,2BACA,2BAEJC,YAAa,CACT,wBACA,wBACA,wBACA,wBACA,yBACA,yBAEJC,YAAa,KAIzBC,QAAS,CACLC,YAAY,EACZC,MAAO,CACHC,SAAS,EACTC,KAAMV,EAAEC,KAAKC,WAAW,aAAc,yCAM/C,CACHa,KA3IS,SAAStB,MAClBhB,EAAEkB,UAAUqB,OAAM,cACVvB,MAAQA,KAAKd,MAAO,OAEdsC,UAAYvC,iBAAiBe,KAAKd,OAGxCa,wBAAwByB,WACxBH,sBAAsBG"}