define("local_eventocoursecreation/preview",["core/notification","core/str","core/templates","core/ajax"],(function(Notification,Str,Templates,Ajax){const Selectors_sections={bulkCreation:"#id_runnowheader",individualCreation:"#id_individualcreationheader",individualContainer:"#id_individualcreationheadercontainer"},Selectors_controls={bulkForce:"#id_force",individualForce:".force-create",bulkCreate:"#id_runnow",createSingle:".create-single",courseSelect:".course-select",createSelected:".create-selected"},Selectors_regions={previewGrid:".course-grid",courseCard:".course-preview-card",previewContainer:"#evento-preview-content"};let cachedPreviewData=null,previewContainer=null,categoryId=null;const formatDate=timestamp=>new Date(1e3*timestamp).toLocaleString(),renderPreviewContent=async()=>{var _cachedPreviewData,_cachedPreviewData2;if(previewContainer)if(null!==(_cachedPreviewData=cachedPreviewData)&&void 0!==_cachedPreviewData&&_cachedPreviewData.status&&Array.isArray(cachedPreviewData.courses))if(0!==cachedPreviewData.courses.length)try{const templateContext={courses:cachedPreviewData.courses.map((course=>({...course,formattedStartDate:formatDate(course.startdate),formattedEndDate:formatDate(course.enddate),subcourses:Array.isArray(course.subcourses)?course.subcourses:[]}))),showCreateSelected:!0,hasSelectedCourses:cachedPreviewData.courses.some((course=>course.canCreate))},template=await Templates.render("local_eventocoursecreation/preview_grid",templateContext);previewContainer.innerHTML=template,initializePreviewHandlers()}catch(error){console.error("Error rendering preview content:",error),console.error("Response data:",cachedPreviewData),previewContainer.innerHTML='\n                <div class="alert alert-danger">\n                    '.concat(M.util.get_string("previewerror","local_eventocoursecreation"),"\n                </div>"),Notification.exception(error)}else previewContainer.innerHTML='\n                <div class="alert alert-info">\n                    <i class="fa fa-info-circle"></i>\n                    '.concat(M.util.get_string("nocoursestocreate","local_eventocoursecreation"),"\n                </div>");else previewContainer.innerHTML='\n                <div class="alert alert-info">\n                    <i class="fa fa-info-circle"></i>\n                    '.concat((null===(_cachedPreviewData2=cachedPreviewData)||void 0===_cachedPreviewData2?void 0:_cachedPreviewData2.message)||M.util.get_string("nocoursestocreate","local_eventocoursecreation"),"\n                </div>");else console.error("Preview container not initialized")},loadPreviewInBackground=async catId=>{try{const formData=new FormData;formData.append("categoryid",catId),formData.append("sesskey",M.cfg.sesskey);const response=await fetch("".concat(M.cfg.wwwroot,"/local/eventocoursecreation/preview.php"),{method:"POST",body:formData});if(!response.ok)throw new Error("Network response was not ok");if(cachedPreviewData=await response.json(),!cachedPreviewData.status)throw new Error(cachedPreviewData.message||"Failed to load preview data");const section=document.querySelector(Selectors_sections.individualCreation);return section&&!section.classList.contains("collapsed")&&await renderPreviewContent(),cachedPreviewData}catch(error){return console.error("Background preview load failed:",error),previewContainer&&(previewContainer.innerHTML='\n                    <div class="alert alert-danger">\n                        '.concat(error.message||M.util.get_string("previewloadfailed","local_eventocoursecreation"),"\n                    </div>")),null}},updateCourseSelectionState=courseCard=>{const checkbox=courseCard.querySelector(Selectors_controls.courseSelect),forceCheckbox=courseCard.querySelector(Selectors_controls.individualForce),createButton=courseCard.querySelector(Selectors_controls.createSingle),isForced=(null==forceCheckbox?void 0:forceCheckbox.checked)||!1,eventId=courseCard.dataset.eventId,course=cachedPreviewData.courses.find((c=>c.eventId===parseInt(eventId)));course&&(course.canCreate||isForced?(checkbox.disabled=!1,createButton.disabled=!1):(checkbox.checked=!1,checkbox.disabled=!0,createButton.disabled=!0)),updateCreateSelectedButton()},updateCreateSelectedButton=()=>{const createSelectedBtn=document.querySelector(Selectors_controls.createSelected);if(!createSelectedBtn)return;const selectedCourses=document.querySelectorAll("".concat(Selectors_controls.courseSelect,":checked"));createSelectedBtn.disabled=0===selectedCourses.length},handleForceChange=e=>{const courseCard=e.target.closest(Selectors_regions.courseCard);courseCard&&updateCourseSelectionState(courseCard)},handleCourseSelection=e=>{const courseCard=e.target.closest(Selectors_regions.courseCard);courseCard&&updateCourseSelectionState(courseCard)},createSelectedCourses=async()=>{const selectedCards=document.querySelectorAll("".concat(Selectors_controls.courseSelect,":checked")),courses=Array.from(selectedCards).map((checkbox=>{const card=checkbox.closest(Selectors_regions.courseCard),forceCheckbox=card.querySelector(Selectors_controls.individualForce);return{eventId:parseInt(card.dataset.eventId),force:forceCheckbox.checked}}));if(0===courses.length)return;const createSelectedBtn=document.querySelector(Selectors_controls.createSelected);await(async(courses,button)=>{button.innerHTML,button.innerHTML='<i class="fa fa-spinner fa-spin"></i> '.concat(M.util.get_string("creating","local_eventocoursecreation")),button.disabled=!0;const results=[];for(const course of courses){const formData=new FormData;formData.append("eventid",course.eventId),formData.append("force",course.force?1:0),formData.append("categoryid",categoryId),formData.append("sesskey",M.cfg.sesskey),formData.append("cachedEvents",JSON.stringify(cachedPreviewData.courses));try{const response=await fetch("".concat(M.cfg.wwwroot,"/local/eventocoursecreation/create_course.php"),{method:"POST",body:formData}),result=await response.json();results.push({status:result.status,message:result.message}),result.status&&(cachedPreviewData.courses=cachedPreviewData.courses.filter((c=>c.eventId!==course.eventId)))}catch(error){results.push({status:!1,message:error.message})}}const successful=results.filter((r=>r.status)).length,failed=results.length-successful;successful>0&&Notification.addNotification({message:M.util.get_string("creationsuccessfulcount","local_eventocoursecreation",successful),type:"success"}),failed>0&&Notification.addNotification({message:M.util.get_string("creationfailedcount","local_eventocoursecreation",failed),type:"error"}),await renderPreviewContent()})(courses,createSelectedBtn)},initializePreviewHandlers=()=>{const container=document.querySelector(Selectors_regions.previewContainer);if(!container)return;container.querySelectorAll(Selectors_controls.individualForce).forEach((checkbox=>{checkbox.addEventListener("change",handleForceChange)})),container.querySelectorAll(Selectors_controls.courseSelect).forEach((checkbox=>{checkbox.addEventListener("change",handleCourseSelection)})),container.querySelectorAll(Selectors_controls.createSingle).forEach((button=>{button.addEventListener("click",(async e=>{const card=e.target.closest(Selectors_regions.courseCard),eventId=parseInt(card.dataset.eventId),forceCheckbox=card.querySelector(Selectors_controls.individualForce);await(async(eventId,force,button)=>{const originalText=button.innerHTML;button.innerHTML='<i class="fa fa-spinner fa-spin"></i>',button.disabled=!0;try{const formData=new FormData;formData.append("eventid",eventId),formData.append("force",force?1:0),formData.append("categoryid",categoryId),formData.append("sesskey",M.cfg.sesskey),formData.append("cachedEvents",JSON.stringify(cachedPreviewData.courses));const response=await fetch("".concat(M.cfg.wwwroot,"/local/eventocoursecreation/create_course.php"),{method:"POST",body:formData}),result=await response.json();if(!result.status)throw new Error(result.message||M.util.get_string("creationfailed","local_eventocoursecreation"));const card=button.closest(Selectors_regions.courseCard);card&&(cachedPreviewData.courses=cachedPreviewData.courses.filter((course=>course.eventId!==parseInt(eventId))),card.remove(),updateCreateSelectedButton()),Notification.addNotification({message:result.message||M.util.get_string("creationsuccessful","local_eventocoursecreation"),type:"success"})}catch(error){button.innerHTML=originalText,button.disabled=!1,Notification.exception(error)}})(eventId,forceCheckbox.checked,e.target)}))}));const createSelectedBtn=container.querySelector(Selectors_controls.createSelected);createSelectedBtn&&createSelectedBtn.addEventListener("click",createSelectedCourses),document.querySelectorAll(Selectors_regions.courseCard).forEach((card=>{updateCourseSelectionState(card)}))};return{init:async catId=>{if(categoryId=catId,previewContainer=document.querySelector(Selectors_regions.previewContainer),!previewContainer)return void console.error("Preview container not found");const previewSection=document.querySelector(Selectors_sections.individualCreation),container=document.querySelector(Selectors_sections.individualContainer);previewSection&&container&&$(container).on("shown.bs.collapse",(async()=>{cachedPreviewData?await renderPreviewContent():await loadPreviewInBackground(categoryId)})),await loadPreviewInBackground(categoryId)}}}));

//# sourceMappingURL=preview.min.js.map