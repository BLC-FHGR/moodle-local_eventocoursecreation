{"version":3,"file":"preview.min.js","sources":["../src/preview.js"],"sourcesContent":["define(['core/notification', 'core/str', 'core/templates', 'core/ajax'], function(Notification, Str, Templates, Ajax) {\n    const Selectors = {\n        sections: {\n            bulkCreation: '#id_runnowheader',\n            individualCreation: '#id_individualcreationheader',\n            individualContainer: '#id_individualcreationheadercontainer'\n        },\n        controls: {\n            bulkForce: '#id_force',\n            individualForce: '.force-create',\n            bulkCreate: '#id_runnow',\n            createSingle: '.create-single',\n            courseSelect: '.course-select',\n            createSelected: '.create-selected',\n            selectAllEligible: '#select-all-eligible',\n            forceAll: '#force-all'\n        },\n        regions: {\n            previewGrid: '.course-grid',\n            courseCard: '.course-preview-card',\n            previewContainer: '#evento-preview-content',\n            courseItem: '.course-item'\n        },\n        counters: {\n            selectedCount: '#selected-count',\n            totalCount: '#total-count',\n            selectedBadge: '.selected-count-badge'\n        },\n        filters: {\n            buttons: '.filter-buttons .btn',\n            active: '.filter-buttons .btn.active'\n        },\n        sorts: {\n            select: '.sort-select'\n        }\n    };\n\n    let cachedPreviewData = null;\n    let previewContainer = null;\n    let categoryId = null;\n    let isCreatingCourse = false;\n\n\n    /**\n     * Format a timestamp to a readable date\n     * @param {number} timestamp\n     * @return {string} Formatted date\n     */\n    const formatDate = (timestamp) => {\n        return new Date(timestamp * 1000).toLocaleString();\n    };\n\n    /**\n     * Render preview content from data\n     * @return {Promise} Promise that resolves when rendering is complete\n     */\n    const renderPreviewContent = async () => {\n        if (!previewContainer) {\n            console.error('Preview container not initialized');\n            return;\n        }\n\n        // Check the response structure and courses availability\n        if (!cachedPreviewData?.status || !Array.isArray(cachedPreviewData.courses)) {\n            previewContainer.innerHTML = `\n                <div class=\"alert alert-info\">\n                    <i class=\"fa fa-info-circle\"></i>\n                    ${cachedPreviewData?.message || M.util.get_string('nocoursestocreate', 'local_eventocoursecreation')}\n                </div>`;\n            return;\n        }\n\n        if (cachedPreviewData.courses.length === 0) {\n            previewContainer.innerHTML = `\n                <div class=\"alert alert-info\">\n                    <i class=\"fa fa-info-circle\"></i>\n                    ${M.util.get_string('nocoursestocreate', 'local_eventocoursecreation')}\n                </div>`;\n            return;\n        }\n\n        try {\n            const templateContext = {\n                courses: cachedPreviewData.courses,\n                showCreateSelected: true,\n                hasSelectedCourses: cachedPreviewData.courses.some(course => course.canCreate)\n            };\n\n            const template = await Templates.render('local_eventocoursecreation/preview_grid', templateContext);\n            previewContainer.innerHTML = template;\n\n            // Initialize handlers for newly rendered content\n            initializePreviewHandlers();\n\n        } catch (error) {\n            console.error('Error rendering preview content:', error);\n            previewContainer.innerHTML = `\n                <div class=\"alert alert-danger\">\n                    ${M.util.get_string('previewerror', 'local_eventocoursecreation')}\n                </div>`;\n            Notification.exception(error);\n        }\n    };\n\n    /**\n     * Load preview data from the server\n     * @param {number} catId Category ID\n     * @param {boolean} refresh Whether to force refresh\n     * @return {Promise} Promise that resolves with preview data\n     */\n    const loadPreviewData = async (catId, refresh = false) => {\n        try {\n            const formData = new FormData();\n            formData.append('categoryid', catId);\n            formData.append('sesskey', M.cfg.sesskey);\n            if (refresh) {\n                formData.append('refresh', 1);\n            }\n            \n            previewContainer.innerHTML = `\n                <div class=\"text-center p-4\">\n                    <div class=\"spinner-border text-primary\" role=\"status\">\n                        <span class=\"sr-only\">${M.util.get_string('loading', 'local_eventocoursecreation')}</span>\n                    </div>\n                    <p class=\"mt-2\">${M.util.get_string('loadingcourselist', 'local_eventocoursecreation')}</p>\n                </div>\n            `;\n            \n            const response = await fetch(`${M.cfg.wwwroot}/local/eventocoursecreation/preview.php`, {\n                method: 'POST',\n                body: formData\n            });\n            \n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n\n            cachedPreviewData = await response.json();\n            \n            if (!cachedPreviewData.status) {\n                throw new Error(cachedPreviewData.message || 'Failed to load preview data');\n            }\n\n            // If the section is already expanded, render immediately\n            const section = document.querySelector(Selectors.sections.individualCreation);\n            if (section && !section.classList.contains('collapsed')) {\n                await renderPreviewContent();\n            }\n\n            return cachedPreviewData;\n        } catch (error) {\n            console.error('Preview load failed:', error);\n            if (previewContainer) {\n                previewContainer.innerHTML = `\n                    <div class=\"alert alert-danger\">\n                        ${error.message || M.util.get_string('previewloadfailed', 'local_eventocoursecreation')}\n                    </div>`;\n            }\n            return null;\n        }\n    };\n\n    /**\n     * Create a single course\n     * @param {number} eventId Event ID\n     * @param {boolean} force Whether to force creation\n     * @param {HTMLElement} button The button that triggered creation\n     * @return {Promise} Promise that resolves when course creation is complete\n     */\n    const createCourse = async (eventId, force, button) => {\n        if (isCreatingCourse) {\n            return;\n        }\n        \n        isCreatingCourse = true;\n        const originalText = button.innerHTML;\n        const card = button.closest(Selectors.regions.courseCard);\n        \n        button.innerHTML = '<i class=\"fa fa-spinner fa-spin\"></i>';\n        button.disabled = true;\n        \n        if (card) {\n            card.classList.add('creating');\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append('eventid', eventId);\n            formData.append('force', force ? 1 : 0);\n            formData.append('categoryid', categoryId);\n            formData.append('sesskey', M.cfg.sesskey);\n\n            console.log(formData);\n            \n            const response = await fetch(`${M.cfg.wwwroot}/local/eventocoursecreation/create_course.php`, {\n                method: 'POST',\n                body: formData\n            });\n\n            await console.log(response);\n            \n            const result = await response.json();\n            \n            if (!result.status) {\n                throw new Error(result.message || M.util.get_string('creationfailed', 'local_eventocoursecreation'));\n            }\n\n            if (card) {\n                // Remove from DOM with animation\n                card.classList.add('created');\n                setTimeout(() => {\n                    // Remove the course from cached data\n                    cachedPreviewData.courses = cachedPreviewData.courses.filter(\n                        course => course.eventId !== parseInt(eventId)\n                    );\n                    \n                    const item = card.closest(Selectors.regions.courseItem);\n                    if (item) {\n                        item.style.opacity = 0;\n                        setTimeout(() => {\n                            item.remove();\n                            updateCreateSelectedButton();\n                            updateSelectionCount();\n                        }, 300);\n                    }\n                }, 500);\n            }\n            \n            Notification.addNotification({\n                message: result.message || M.util.get_string('creationsuccessful', 'local_eventocoursecreation'),\n                type: 'success'\n            });\n\n        } catch (error) {\n            button.innerHTML = originalText;\n            button.disabled = false;\n            \n            if (card) {\n                card.classList.remove('creating');\n                card.classList.add('error');\n                setTimeout(() => {\n                    card.classList.remove('error');\n                }, 2000);\n            }\n            \n            Notification.exception(error);\n        } finally {\n            isCreatingCourse = false;\n        }\n    };\n\n    /**\n     * Create multiple courses\n     * @param {Array} courses Courses to create\n     * @param {HTMLElement} button Button that triggered creation\n     * @return {Promise} Promise that resolves when all courses are created\n     */\n    const createMultipleCourses = async (courses, button) => {\n        if (isCreatingCourse || courses.length === 0) {\n            return;\n        }\n        \n        isCreatingCourse = true;\n        const originalText = button.innerHTML;\n        button.innerHTML = `<i class=\"fa fa-spinner fa-spin\"></i> ${M.util.get_string('creating', 'local_eventocoursecreation')}`;\n        button.disabled = true;\n\n        const results = [];\n        let successful = 0;\n        let failed = 0;\n        \n        for (const course of courses) {\n            try {\n                // Add visual indicator for the current course\n                const courseCard = document.querySelector(`.course-item[data-event-id=\"${course.eventId}\"] ${Selectors.regions.courseCard}`);\n                if (courseCard) {\n                    courseCard.classList.add('creating');\n                }\n                \n                const formData = new FormData();\n                formData.append('eventid', course.eventId);\n                formData.append('force', course.force ? 1 : 0);\n                formData.append('categoryid', categoryId);\n                formData.append('sesskey', M.cfg.sesskey);\n\n                const response = await fetch(`${M.cfg.wwwroot}/local/eventocoursecreation/create_course.php`, {\n                    method: 'POST',\n                    body: formData\n                });\n                \n                const result = await response.json();\n                results.push({ status: result.status, message: result.message });\n                \n                if (result.status) {\n                    successful++;\n                    \n                    // Visual success indicator\n                    if (courseCard) {\n                        courseCard.classList.add('created');\n                        setTimeout(() => {\n                            const item = courseCard.closest(Selectors.regions.courseItem);\n                            if (item) {\n                                item.style.opacity = 0;\n                                setTimeout(() => item.remove(), 300);\n                            }\n                        }, 500);\n                    }\n                    \n                    // Remove created course from cached data\n                    cachedPreviewData.courses = cachedPreviewData.courses.filter(\n                        c => c.eventId !== course.eventId\n                    );\n                } else {\n                    failed++;\n                    // Visual error indicator\n                    if (courseCard) {\n                        courseCard.classList.remove('creating');\n                        courseCard.classList.add('error');\n                        setTimeout(() => {\n                            courseCard.classList.remove('error');\n                        }, 2000);\n                    }\n                }\n            } catch (error) {\n                results.push({ status: false, message: error.message });\n                failed++;\n                \n                // Find and reset the card\n                const courseCard = document.querySelector(`.course-item[data-event-id=\"${course.eventId}\"] ${Selectors.regions.courseCard}`);\n                if (courseCard) {\n                    courseCard.classList.remove('creating');\n                    courseCard.classList.add('error');\n                    setTimeout(() => {\n                        courseCard.classList.remove('error');\n                    }, 2000);\n                }\n            }\n        }\n\n        // Show result notifications\n        if (successful > 0) {\n            Notification.addNotification({\n                message: M.util.get_string('creationsuccessfulcount', 'local_eventocoursecreation', successful),\n                type: 'success'\n            });\n        }\n        \n        if (failed > 0) {\n            Notification.addNotification({\n                message: M.util.get_string('creationfailedcount', 'local_eventocoursecreation', failed),\n                type: 'error'\n            });\n        }\n\n        // Reset button and update UI\n        button.innerHTML = originalText;\n        button.disabled = true;\n        isCreatingCourse = false;\n        \n        // Update selection count and create button state\n        updateSelectionCount();\n        updateCreateSelectedButton();\n    };\n\n    /**\n     * Update course selection state based on force checkbox\n     * @param {HTMLElement} courseCard The course card element\n     */\n    const updateCourseSelectionState = (courseCard) => {\n        const checkbox = courseCard.querySelector(Selectors.controls.courseSelect);\n        const forceCheckbox = courseCard.querySelector(Selectors.controls.individualForce);\n        const createButton = courseCard.querySelector(Selectors.controls.createSingle);\n        const isForced = forceCheckbox?.checked || false;\n        \n        const courseItem = courseCard.closest(Selectors.regions.courseItem);\n        if (!courseItem) return;\n        \n        const eventId = courseItem.dataset.eventId;\n        const course = cachedPreviewData.courses.find(c => c.eventId === parseInt(eventId));\n\n        if (course) {\n            if (!course.canCreate && !isForced) {\n                checkbox.checked = false;\n                checkbox.disabled = true;\n                createButton.disabled = true;\n            } else {\n                checkbox.disabled = false;\n                createButton.disabled = false;\n            }\n        }\n\n        updateCreateSelectedButton();\n    };\n\n    /**\n     * Update the create selected button state\n     */\n    const updateCreateSelectedButton = () => {\n        const createSelectedBtn = document.querySelector(Selectors.controls.createSelected);\n        if (!createSelectedBtn) return;\n\n        const selectedCourses = document.querySelectorAll(`${Selectors.controls.courseSelect}:checked`);\n        createSelectedBtn.disabled = selectedCourses.length === 0;\n        \n        // Update badge count\n        const badge = document.querySelector(Selectors.counters.selectedBadge);\n        if (badge) {\n            badge.textContent = selectedCourses.length;\n        }\n    };\n\n    /**\n     * Update selection counters\n     */\n    const updateSelectionCount = () => {\n        const selectedCourses = document.querySelectorAll(`${Selectors.controls.courseSelect}:checked`);\n        const totalCourses = document.querySelectorAll(Selectors.controls.courseSelect);\n        \n        const selectedCountEl = document.querySelector(Selectors.counters.selectedCount);\n        const totalCountEl = document.querySelector(Selectors.counters.totalCount);\n        \n        if (selectedCountEl) {\n            selectedCountEl.textContent = selectedCourses.length;\n        }\n        \n        if (totalCountEl) {\n            totalCountEl.textContent = totalCourses.length;\n        }\n    };\n\n    /**\n     * Handle force checkbox change\n     * @param {Event} e The change event\n     */\n    const handleForceChange = (e) => {\n        const courseCard = e.target.closest(Selectors.regions.courseCard);\n        if (courseCard) {\n            updateCourseSelectionState(courseCard);\n        }\n    };\n\n    /**\n     * Handle course selection checkbox change\n     * @param {Event} e The change event\n     */\n    const handleCourseSelection = (e) => {\n        updateCreateSelectedButton();\n        updateSelectionCount();\n    };\n\n    /**\n     * Create selected courses\n     * @return {Promise} Promise that resolves when all courses are created\n     */\n    const createSelectedCourses = async () => {\n        const selectedCards = document.querySelectorAll(`${Selectors.controls.courseSelect}:checked`);\n        const courses = Array.from(selectedCards).map(checkbox => {\n            const item = checkbox.closest(Selectors.regions.courseItem);\n            if (!item) return null;\n            \n            const card = checkbox.closest(Selectors.regions.courseCard);\n            const forceCheckbox = card.querySelector(Selectors.controls.individualForce);\n            \n            return {\n                eventId: parseInt(item.dataset.eventId),\n                force: forceCheckbox.checked\n            };\n        }).filter(Boolean);\n\n        if (courses.length === 0) {\n            return;\n        }\n\n        const createSelectedBtn = document.querySelector(Selectors.controls.createSelected);\n        await createMultipleCourses(courses, createSelectedBtn);\n    };\n\n    /**\n     * Apply filter to course list\n     * @param {string} filterType The filter type\n     */\n    const applyFilter = (filterType) => {\n        const items = document.querySelectorAll(Selectors.regions.courseItem);\n        \n        items.forEach(item => {\n            const status = item.dataset.status;\n            \n            switch(filterType) {\n                case 'all':\n                    item.style.display = '';\n                    break;\n                case 'ready':\n                    item.style.display = status === 'ready' ? '' : 'none';\n                    break;\n                case 'blocked':\n                    item.style.display = status === 'blocked' ? '' : 'none';\n                    break;\n            }\n        });\n        \n        // Update active button\n        document.querySelectorAll(Selectors.filters.buttons).forEach(btn => {\n            btn.classList.remove('active');\n        });\n        \n        const activeButton = document.querySelector(`${Selectors.filters.buttons}[data-filter=\"${filterType}\"]`);\n        if (activeButton) {\n            activeButton.classList.add('active');\n        }\n    };\n\n    /**\n     * Apply sort to course list\n     * @param {string} sortType The sort type\n     */\n    const applySortBy = (sortType) => {\n        const grid = document.querySelector(Selectors.regions.previewGrid);\n        if (!grid) return;\n        \n        const items = Array.from(document.querySelectorAll(Selectors.regions.courseItem));\n        \n        items.sort((a, b) => {\n            switch(sortType) {\n                case 'status':\n                    // Status sorting: Ready first, then blocked\n                    if (a.dataset.status !== b.dataset.status) {\n                        return a.dataset.status === 'ready' ? -1 : 1;\n                    }\n                    // Fall through to date sorting if status is the same\n                case 'date':\n                    return parseInt(a.dataset.date) - parseInt(b.dataset.date);\n                case 'name':\n                    return a.dataset.name.localeCompare(b.dataset.name);\n                default:\n                    return 0;\n            }\n        });\n        \n        // Reorder DOM elements\n        items.forEach(item => {\n            grid.appendChild(item);\n        });\n    };\n\n    /**\n     * Handle select all eligible checkbox\n     * @param {Event} e The change event\n     */\n    const handleSelectAllEligible = (e) => {\n        const isChecked = e.target.checked;\n        \n        document.querySelectorAll(Selectors.regions.courseItem).forEach(item => {\n            const checkbox = item.querySelector(Selectors.controls.courseSelect);\n            if (checkbox && !checkbox.disabled) {\n                checkbox.checked = isChecked;\n            }\n        });\n        \n        updateCreateSelectedButton();\n        updateSelectionCount();\n    };\n\n    /**\n     * Handle force all checkbox\n     * @param {Event} e The change event\n     */\n    const handleForceAll = (e) => {\n        const isChecked = e.target.checked;\n        \n        document.querySelectorAll(Selectors.controls.individualForce).forEach(checkbox => {\n            checkbox.checked = isChecked;\n            \n            // Update dependent elements\n            const card = checkbox.closest(Selectors.regions.courseCard);\n            if (card) {\n                updateCourseSelectionState(card);\n            }\n        });\n        \n        updateCreateSelectedButton();\n        updateSelectionCount();\n    };\n\n    /**\n     * Initialize all preview handlers\n     */\n    const initializePreviewHandlers = () => {\n        const container = document.querySelector(Selectors.regions.previewContainer);\n        if (!container) return;\n\n        // Force creation toggles\n        container.querySelectorAll(Selectors.controls.individualForce).forEach(checkbox => {\n            checkbox.addEventListener('change', handleForceChange);\n        });\n\n        // Course selection checkboxes\n        container.querySelectorAll(Selectors.controls.courseSelect).forEach(checkbox => {\n            checkbox.addEventListener('change', handleCourseSelection);\n        });\n\n        // Single course creation buttons\n        container.querySelectorAll(Selectors.controls.createSingle).forEach(button => {\n            button.addEventListener('click', async (e) => {\n                const item = e.target.closest(Selectors.regions.courseItem);\n                if (!item) return;\n                \n                const eventId = parseInt(item.dataset.eventId);\n                const card = e.target.closest(Selectors.regions.courseCard);\n                const forceCheckbox = card.querySelector(Selectors.controls.individualForce);\n                \n                await createCourse(eventId, forceCheckbox.checked, e.target);\n            });\n        });\n\n        // Create selected button\n        const createSelectedBtn = container.querySelector(Selectors.controls.createSelected);\n        if (createSelectedBtn) {\n            createSelectedBtn.addEventListener('click', createSelectedCourses);\n        }\n\n        // Filter buttons\n        container.querySelectorAll(Selectors.filters.buttons).forEach(button => {\n            button.addEventListener('click', (e) => {\n                const filterType = e.target.dataset.filter;\n                applyFilter(filterType);\n            });\n        });\n\n        // Sort select\n        const sortSelect = container.querySelector(Selectors.sorts.select);\n        if (sortSelect) {\n            sortSelect.addEventListener('change', (e) => {\n                applySortBy(e.target.value);\n            });\n        }\n\n        // Select all eligible\n        const selectAllEligible = container.querySelector(Selectors.controls.selectAllEligible);\n        if (selectAllEligible) {\n            selectAllEligible.addEventListener('change', handleSelectAllEligible);\n        }\n\n        // Force all\n        const forceAll = container.querySelector(Selectors.controls.forceAll);\n        if (forceAll) {\n            forceAll.addEventListener('change', handleForceAll);\n        }\n\n        // Initialize state\n        updateCreateSelectedButton();\n        updateSelectionCount();\n        applyFilter('all');\n        applySortBy('status');\n    };\n\n    /**\n     * Initialize the preview module\n     * @param {number} catId Category ID\n     * @return {Promise} Promise that resolves when initialization is complete\n     */\n    const init = async (catId) => {\n        categoryId = catId;\n        previewContainer = document.querySelector(Selectors.regions.previewContainer);\n        if (!previewContainer) {\n            console.error('Preview container not found');\n            return;\n        }\n\n        const previewSection = document.querySelector(Selectors.sections.individualCreation);\n        const container = document.querySelector(Selectors.sections.individualContainer);\n        \n        if (previewSection && container) {\n            $(container).on('shown.bs.collapse', async () => {\n                if (!cachedPreviewData) {\n                    await loadPreviewData(categoryId);\n                } else {\n                    await renderPreviewContent();\n                }\n            });\n        }\n\n        // Load preview data in the background\n        await loadPreviewData(categoryId);\n    };\n\n    return {\n        init: init\n    };\n});"],"names":["define","Notification","Str","Templates","Ajax","Selectors","bulkCreation","individualCreation","individualContainer","bulkForce","individualForce","bulkCreate","createSingle","courseSelect","createSelected","selectAllEligible","forceAll","previewGrid","courseCard","previewContainer","courseItem","selectedCount","totalCount","selectedBadge","buttons","active","select","cachedPreviewData","categoryId","isCreatingCourse","renderPreviewContent","async","_cachedPreviewData","status","Array","isArray","courses","length","templateContext","showCreateSelected","hasSelectedCourses","some","course","canCreate","template","render","innerHTML","initializePreviewHandlers","error","console","M","util","get_string","exception","message","loadPreviewData","catId","refresh","formData","FormData","append","cfg","sesskey","response","fetch","wwwroot","method","body","ok","Error","json","section","document","querySelector","classList","contains","updateCourseSelectionState","checkbox","forceCheckbox","createButton","isForced","checked","closest","eventId","dataset","find","c","parseInt","disabled","updateCreateSelectedButton","createSelectedBtn","selectedCourses","querySelectorAll","badge","textContent","updateSelectionCount","totalCourses","selectedCountEl","totalCountEl","handleForceChange","e","target","handleCourseSelection","createSelectedCourses","selectedCards","from","map","item","force","filter","Boolean","button","originalText","results","successful","failed","add","result","push","setTimeout","style","opacity","remove","addNotification","type","createMultipleCourses","applyFilter","filterType","forEach","display","btn","activeButton","applySortBy","sortType","grid","items","sort","a","b","date","name","localeCompare","appendChild","handleSelectAllEligible","isChecked","handleForceAll","card","container","addEventListener","log","createCourse","sortSelect","value","init","previewSection","$","on"],"mappings":"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"}