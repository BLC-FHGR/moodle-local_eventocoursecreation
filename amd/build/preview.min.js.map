{"version":3,"file":"preview.min.js","sources":["../src/preview.js"],"sourcesContent":["define(['core/notification', 'core/str', 'core/templates', 'core/ajax'], function(Notification, Str, Templates, Ajax) {\n    const Selectors = {\n        sections: {\n            bulkCreation: '#id_runnowheader',\n            individualCreation: '#id_individualcreationheader',\n            individualContainer: '#id_individualcreationheadercontainer'\n        },\n        controls: {\n            bulkForce: '#id_force',\n            individualForce: '.force-create',\n            bulkCreate: '#id_runnow',\n            createSingle: '.create-single',\n            courseSelect: '.course-select',\n            createSelected: '.create-selected'\n        },\n        regions: {\n            previewGrid: '.course-grid',\n            courseCard: '.course-preview-card',\n            previewContainer: '#evento-preview-content'\n        }\n    };\n\n    let cachedPreviewData = null;\n    let previewContainer = null;\n    let categoryId = null;\n\n    const formatDate = (timestamp) => {\n        return new Date(timestamp * 1000).toLocaleString();\n    };\n\n    const renderPreviewContent = async () => {\n        if (!previewContainer) {\n            console.error('Preview container not initialized');\n            return;\n        }\n\n        // Check the response structure and courses availability\n        if (!cachedPreviewData?.status || !Array.isArray(cachedPreviewData.courses)) {\n            previewContainer.innerHTML = `\n                <div class=\"alert alert-info\">\n                    <i class=\"fa fa-info-circle\"></i>\n                    ${cachedPreviewData?.message || M.util.get_string('nocoursestocreate', 'local_eventocoursecreation')}\n                </div>`;\n            return;\n        }\n\n        if (cachedPreviewData.courses.length === 0) {\n            previewContainer.innerHTML = `\n                <div class=\"alert alert-info\">\n                    <i class=\"fa fa-info-circle\"></i>\n                    ${M.util.get_string('nocoursestocreate', 'local_eventocoursecreation')}\n                </div>`;\n            return;\n        }\n\n        try {\n            const templateContext = {\n                courses: cachedPreviewData.courses.map(course => ({\n                    ...course,\n                    formattedStartDate: formatDate(course.startdate),\n                    formattedEndDate: formatDate(course.enddate),\n                    subcourses: Array.isArray(course.subcourses) ? course.subcourses : []\n                })),\n                showCreateSelected: true,\n                hasSelectedCourses: cachedPreviewData.courses.some(course => course.canCreate)\n            };\n\n            const template = await Templates.render('local_eventocoursecreation/preview_grid', templateContext);\n            previewContainer.innerHTML = template;\n\n            // Initialize handlers for newly rendered content\n            initializePreviewHandlers();\n\n        } catch (error) {\n            console.error('Error rendering preview content:', error);\n            console.error('Response data:', cachedPreviewData);\n            previewContainer.innerHTML = `\n                <div class=\"alert alert-danger\">\n                    ${M.util.get_string('previewerror', 'local_eventocoursecreation')}\n                </div>`;\n            Notification.exception(error);\n        }\n    };\n\n    const loadPreviewInBackground = async (catId) => {\n        try {\n            const formData = new FormData();\n            formData.append('categoryid', catId);\n            formData.append('sesskey', M.cfg.sesskey);\n            \n            const response = await fetch(`${M.cfg.wwwroot}/local/eventocoursecreation/preview.php`, {\n                method: 'POST',\n                body: formData\n            });\n            \n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n\n            cachedPreviewData = await response.json();\n            \n            if (!cachedPreviewData.status) {\n                throw new Error(cachedPreviewData.message || 'Failed to load preview data');\n            }\n\n            // If the section is already expanded, render immediately\n            const section = document.querySelector(Selectors.sections.individualCreation);\n            if (section && !section.classList.contains('collapsed')) {\n                await renderPreviewContent();\n            }\n\n            return cachedPreviewData;\n        } catch (error) {\n            console.error('Background preview load failed:', error);\n            if (previewContainer) {\n                previewContainer.innerHTML = `\n                    <div class=\"alert alert-danger\">\n                        ${error.message || M.util.get_string('previewloadfailed', 'local_eventocoursecreation')}\n                    </div>`;\n            }\n            return null;\n        }\n    };\n\n    const createCourse = async (eventId, force, button) => {\n        const originalText = button.innerHTML;\n        button.innerHTML = '<i class=\"fa fa-spinner fa-spin\"></i>';\n        button.disabled = true;\n\n        try {\n            const formData = new FormData();\n            formData.append('eventid', eventId);\n            formData.append('force', force ? 1 : 0);\n            formData.append('categoryid', categoryId);\n            formData.append('sesskey', M.cfg.sesskey);\n            formData.append('cachedEvents', JSON.stringify(cachedPreviewData.courses));\n            \n            const response = await fetch(`${M.cfg.wwwroot}/local/eventocoursecreation/create_course.php`, {\n                method: 'POST',\n                body: formData\n            });\n            \n            const result = await response.json();\n            if (!result.status) {\n                throw new Error(result.message || M.util.get_string('creationfailed', 'local_eventocoursecreation'));\n            }\n\n            const card = button.closest(Selectors.regions.courseCard);\n            if (card) {\n                // Remove the course from cached data\n                cachedPreviewData.courses = cachedPreviewData.courses.filter(\n                    course => course.eventId !== parseInt(eventId)\n                );\n                card.remove();\n                updateCreateSelectedButton();\n            }\n            \n            Notification.addNotification({\n                message: result.message || M.util.get_string('creationsuccessful', 'local_eventocoursecreation'),\n                type: 'success'\n            });\n\n        } catch (error) {\n            button.innerHTML = originalText;\n            button.disabled = false;\n            Notification.exception(error);\n        }\n    };\n\n    const createMultipleCourses = async (courses, button) => {\n        const originalText = button.innerHTML;\n        button.innerHTML = `<i class=\"fa fa-spinner fa-spin\"></i> ${M.util.get_string('creating', 'local_eventocoursecreation')}`;\n        button.disabled = true;\n\n        const results = [];\n        for (const course of courses) {\n            const formData = new FormData();\n            formData.append('eventid', course.eventId);\n            formData.append('force', course.force ? 1 : 0);\n            formData.append('categoryid', categoryId);\n            formData.append('sesskey', M.cfg.sesskey);\n            formData.append('cachedEvents', JSON.stringify(cachedPreviewData.courses));\n\n            try {\n                const response = await fetch(`${M.cfg.wwwroot}/local/eventocoursecreation/create_course.php`, {\n                    method: 'POST',\n                    body: formData\n                });\n                const result = await response.json();\n                results.push({ status: result.status, message: result.message });\n                \n                if (result.status) {\n                    // Remove created course from cached data\n                    cachedPreviewData.courses = cachedPreviewData.courses.filter(\n                        c => c.eventId !== course.eventId\n                    );\n                }\n            } catch (error) {\n                results.push({ status: false, message: error.message });\n            }\n        }\n\n        const successful = results.filter(r => r.status).length;\n        const failed = results.length - successful;\n\n        if (successful > 0) {\n            Notification.addNotification({\n                message: M.util.get_string('creationsuccessfulcount', 'local_eventocoursecreation', successful),\n                type: 'success'\n            });\n        }\n        if (failed > 0) {\n            Notification.addNotification({\n                message: M.util.get_string('creationfailedcount', 'local_eventocoursecreation', failed),\n                type: 'error'\n            });\n        }\n\n        // Re-render the preview content to reflect changes\n        await renderPreviewContent();\n    };\n\n    const updateCourseSelectionState = (courseCard) => {\n        const checkbox = courseCard.querySelector(Selectors.controls.courseSelect);\n        const forceCheckbox = courseCard.querySelector(Selectors.controls.individualForce);\n        const createButton = courseCard.querySelector(Selectors.controls.createSingle);\n        const isForced = forceCheckbox?.checked || false;\n        const eventId = courseCard.dataset.eventId;\n        const course = cachedPreviewData.courses.find(c => c.eventId === parseInt(eventId));\n\n        if (course) {\n            if (!course.canCreate && !isForced) {\n                checkbox.checked = false;\n                checkbox.disabled = true;\n                createButton.disabled = true;\n            } else {\n                checkbox.disabled = false;\n                createButton.disabled = false;\n            }\n        }\n\n        updateCreateSelectedButton();\n    };\n\n    const updateCreateSelectedButton = () => {\n        const createSelectedBtn = document.querySelector(Selectors.controls.createSelected);\n        if (!createSelectedBtn) return;\n\n        const selectedCourses = document.querySelectorAll(`${Selectors.controls.courseSelect}:checked`);\n        createSelectedBtn.disabled = selectedCourses.length === 0;\n    };\n\n    const handleForceChange = (e) => {\n        const courseCard = e.target.closest(Selectors.regions.courseCard);\n        if (courseCard) {\n            updateCourseSelectionState(courseCard);\n        }\n    };\n\n    const handleCourseSelection = (e) => {\n        const courseCard = e.target.closest(Selectors.regions.courseCard);\n        if (courseCard) {\n            updateCourseSelectionState(courseCard);\n        }\n    };\n\n    const createSelectedCourses = async () => {\n        const selectedCards = document.querySelectorAll(`${Selectors.controls.courseSelect}:checked`);\n        const courses = Array.from(selectedCards).map(checkbox => {\n            const card = checkbox.closest(Selectors.regions.courseCard);\n            const forceCheckbox = card.querySelector(Selectors.controls.individualForce);\n            return {\n                eventId: parseInt(card.dataset.eventId),\n                force: forceCheckbox.checked\n            };\n        });\n\n        if (courses.length === 0) {\n            return;\n        }\n\n        const createSelectedBtn = document.querySelector(Selectors.controls.createSelected);\n        await createMultipleCourses(courses, createSelectedBtn);\n    };\n\n    const initializePreviewHandlers = () => {\n        const container = document.querySelector(Selectors.regions.previewContainer);\n        if (!container) return;\n\n        // Force creation toggles\n        container.querySelectorAll(Selectors.controls.individualForce).forEach(checkbox => {\n            checkbox.addEventListener('change', handleForceChange);\n        });\n\n        // Course selection checkboxes\n        container.querySelectorAll(Selectors.controls.courseSelect).forEach(checkbox => {\n            checkbox.addEventListener('change', handleCourseSelection);\n        });\n\n        // Single course creation buttons\n        container.querySelectorAll(Selectors.controls.createSingle).forEach(button => {\n            button.addEventListener('click', async (e) => {\n                const card = e.target.closest(Selectors.regions.courseCard);\n                const eventId = parseInt(card.dataset.eventId);\n                const forceCheckbox = card.querySelector(Selectors.controls.individualForce);\n                await createCourse(eventId, forceCheckbox.checked, e.target);\n            });\n        });\n\n        // Create selected button\n        const createSelectedBtn = container.querySelector(Selectors.controls.createSelected);\n        if (createSelectedBtn) {\n            createSelectedBtn.addEventListener('click', createSelectedCourses);\n        }\n\n        // Initial states\n        document.querySelectorAll(Selectors.regions.courseCard).forEach(card => {\n            updateCourseSelectionState(card);\n        });\n    };\n\n    const init = async (catId) => {\n        categoryId = catId;\n        previewContainer = document.querySelector(Selectors.regions.previewContainer);\n        if (!previewContainer) {\n            console.error('Preview container not found');\n            return;\n        }\n\n        const previewSection = document.querySelector(Selectors.sections.individualCreation);\n        const container = document.querySelector(Selectors.sections.individualContainer);\n        \n        if (previewSection && container) {\n            $(container).on('shown.bs.collapse', async () => {\n                if (!cachedPreviewData) {\n                    await loadPreviewInBackground(categoryId);\n                } else {\n                    await renderPreviewContent();\n                }\n            });\n        }\n\n        await loadPreviewInBackground(categoryId);\n    };\n\n    return {\n        init: init\n    };\n});"],"names":["define","Notification","Str","Templates","Ajax","Selectors","bulkCreation","individualCreation","individualContainer","bulkForce","individualForce","bulkCreate","createSingle","courseSelect","createSelected","previewGrid","courseCard","previewContainer","cachedPreviewData","categoryId","formatDate","timestamp","Date","toLocaleString","renderPreviewContent","async","_cachedPreviewData","status","Array","isArray","courses","length","templateContext","map","course","formattedStartDate","startdate","formattedEndDate","enddate","subcourses","showCreateSelected","hasSelectedCourses","some","canCreate","template","render","innerHTML","initializePreviewHandlers","error","console","M","util","get_string","exception","message","loadPreviewInBackground","formData","FormData","append","catId","cfg","sesskey","response","fetch","wwwroot","method","body","ok","Error","json","section","document","querySelector","classList","contains","updateCourseSelectionState","checkbox","forceCheckbox","createButton","isForced","checked","eventId","dataset","find","c","parseInt","disabled","updateCreateSelectedButton","createSelectedBtn","selectedCourses","querySelectorAll","handleForceChange","e","target","closest","handleCourseSelection","createSelectedCourses","selectedCards","from","card","force","button","results","JSON","stringify","result","push","filter","successful","r","failed","addNotification","type","createMultipleCourses","container","forEach","addEventListener","originalText","remove","createCourse","init","previewSection","$","on"],"mappings":"AAAAA,4CAAO,CAAC,oBAAqB,WAAY,iBAAkB,cAAc,SAASC,aAAcC,IAAKC,UAAWC,YACtGC,mBACQ,CACNC,aAAc,mBACdC,mBAAoB,+BACpBC,oBAAqB,yCAJvBH,mBAMQ,CACNI,UAAW,YACXC,gBAAiB,gBACjBC,WAAY,aACZC,aAAc,iBACdC,aAAc,iBACdC,eAAgB,oBAZlBT,kBAcO,CACLU,YAAa,eACbC,WAAY,uBACZC,iBAAkB,+BAItBC,kBAAoB,KACpBD,iBAAmB,KACnBE,WAAa,WAEXC,WAAcC,WACT,IAAIC,KAAiB,IAAZD,WAAkBE,iBAGhCC,qBAAuBC,wDACpBR,+CAMAC,iDAAAQ,mBAAmBC,QAAWC,MAAMC,QAAQX,kBAAkBY,YAS1B,IAArCZ,kBAAkBY,QAAQC,iBAUpBC,gBAAkB,CACpBF,QAASZ,kBAAkBY,QAAQG,KAAIC,aAChCA,OACHC,mBAAoBf,WAAWc,OAAOE,WACtCC,iBAAkBjB,WAAWc,OAAOI,SACpCC,WAAYX,MAAMC,QAAQK,OAAOK,YAAcL,OAAOK,WAAa,OAEvEC,oBAAoB,EACpBC,mBAAoBvB,kBAAkBY,QAAQY,MAAKR,QAAUA,OAAOS,aAGlEC,eAAiBzC,UAAU0C,OAAO,0CAA2Cb,iBACnFf,iBAAiB6B,UAAYF,SAG7BG,4BAEF,MAAOC,OACLC,QAAQD,MAAM,mCAAoCA,OAClDC,QAAQD,MAAM,iBAAkB9B,mBAChCD,iBAAiB6B,4FAEPI,EAAEC,KAAKC,WAAW,eAAgB,0DAE5CnD,aAAaoD,UAAUL,YAjCvB/B,iBAAiB6B,iJAGPI,EAAEC,KAAKC,WAAW,oBAAqB,+DAZjDnC,iBAAiB6B,8KAGP5B,4EAAmBoC,UAAWJ,EAAEC,KAAKC,WAAW,oBAAqB,+DAT/EH,QAAQD,MAAM,sCAoDhBO,wBAA0B9B,MAAAA,kBAElB+B,SAAW,IAAIC,SACrBD,SAASE,OAAO,aAAcC,OAC9BH,SAASE,OAAO,UAAWR,EAAEU,IAAIC,eAE3BC,eAAiBC,gBAASb,EAAEU,IAAII,mDAAkD,CACpFC,OAAQ,OACRC,KAAMV,eAGLM,SAASK,SACJ,IAAIC,MAAM,kCAGpBlD,wBAA0B4C,SAASO,QAE9BnD,kBAAkBS,aACb,IAAIyC,MAAMlD,kBAAkBoC,SAAW,qCAI3CgB,QAAUC,SAASC,cAAcnE,mBAAmBE,2BACtD+D,UAAYA,QAAQG,UAAUC,SAAS,oBACjClD,uBAGHN,kBACT,MAAO8B,cACLC,QAAQD,MAAM,kCAAmCA,OAC7C/B,mBACAA,iBAAiB6B,oGAEPE,MAAMM,SAAWJ,EAAEC,KAAKC,WAAW,oBAAqB,+DAG/D,OAsGTuB,2BAA8B3D,mBAC1B4D,SAAW5D,WAAWwD,cAAcnE,mBAAmBQ,cACvDgE,cAAgB7D,WAAWwD,cAAcnE,mBAAmBK,iBAC5DoE,aAAe9D,WAAWwD,cAAcnE,mBAAmBO,cAC3DmE,UAAWF,MAAAA,qBAAAA,cAAeG,WAAW,EACrCC,QAAUjE,WAAWkE,QAAQD,QAC7B/C,OAAShB,kBAAkBY,QAAQqD,MAAKC,GAAKA,EAAEH,UAAYI,SAASJ,WAEtE/C,SACKA,OAAOS,WAAcoC,UAKtBH,SAASU,UAAW,EACpBR,aAAaQ,UAAW,IALxBV,SAASI,SAAU,EACnBJ,SAASU,UAAW,EACpBR,aAAaQ,UAAW,IAOhCC,8BAGEA,2BAA6B,WACzBC,kBAAoBjB,SAASC,cAAcnE,mBAAmBS,oBAC/D0E,kBAAmB,aAElBC,gBAAkBlB,SAASmB,2BAAoBrF,mBAAmBQ,0BACxE2E,kBAAkBF,SAAsC,IAA3BG,gBAAgB1D,QAG3C4D,kBAAqBC,UACjB5E,WAAa4E,EAAEC,OAAOC,QAAQzF,kBAAkBW,YAClDA,YACA2D,2BAA2B3D,aAI7B+E,sBAAyBH,UACrB5E,WAAa4E,EAAEC,OAAOC,QAAQzF,kBAAkBW,YAClDA,YACA2D,2BAA2B3D,aAI7BgF,sBAAwBvE,gBACpBwE,cAAgB1B,SAASmB,2BAAoBrF,mBAAmBQ,0BAChEiB,QAAUF,MAAMsE,KAAKD,eAAehE,KAAI2C,iBACpCuB,KAAOvB,SAASkB,QAAQzF,kBAAkBW,YAC1C6D,cAAgBsB,KAAK3B,cAAcnE,mBAAmBK,uBACrD,CACHuE,QAASI,SAASc,KAAKjB,QAAQD,SAC/BmB,MAAOvB,cAAcG,eAIN,IAAnBlD,QAAQC,oBAINyD,kBAAoBjB,SAASC,cAAcnE,mBAAmBS,qBAhH1CW,OAAOK,QAASuE,UACrBA,OAAOvD,UAC5BuD,OAAOvD,0DAAqDI,EAAEC,KAAKC,WAAW,WAAY,+BAC1FiD,OAAOf,UAAW,QAEZgB,QAAU,OACX,MAAMpE,UAAUJ,QAAS,OACpB0B,SAAW,IAAIC,SACrBD,SAASE,OAAO,UAAWxB,OAAO+C,SAClCzB,SAASE,OAAO,QAASxB,OAAOkE,MAAQ,EAAI,GAC5C5C,SAASE,OAAO,aAAcvC,YAC9BqC,SAASE,OAAO,UAAWR,EAAEU,IAAIC,SACjCL,SAASE,OAAO,eAAgB6C,KAAKC,UAAUtF,kBAAkBY,oBAGvDgC,eAAiBC,gBAASb,EAAEU,IAAII,yDAAwD,CAC1FC,OAAQ,OACRC,KAAMV,WAEJiD,aAAe3C,SAASO,OAC9BiC,QAAQI,KAAK,CAAE/E,OAAQ8E,OAAO9E,OAAQ2B,QAASmD,OAAOnD,UAElDmD,OAAO9E,SAEPT,kBAAkBY,QAAUZ,kBAAkBY,QAAQ6E,QAClDvB,GAAKA,EAAEH,UAAY/C,OAAO+C,WAGpC,MAAOjC,OACLsD,QAAQI,KAAK,CAAE/E,QAAQ,EAAO2B,QAASN,MAAMM,iBAI/CsD,WAAaN,QAAQK,QAAOE,GAAKA,EAAElF,SAAQI,OAC3C+E,OAASR,QAAQvE,OAAS6E,WAE5BA,WAAa,GACb3G,aAAa8G,gBAAgB,CACzBzD,QAASJ,EAAEC,KAAKC,WAAW,0BAA2B,6BAA8BwD,YACpFI,KAAM,YAGVF,OAAS,GACT7G,aAAa8G,gBAAgB,CACzBzD,QAASJ,EAAEC,KAAKC,WAAW,sBAAuB,6BAA8B0D,QAChFE,KAAM,gBAKRxF,wBA+DAyF,CAAsBnF,QAAS0D,oBAGnCzC,0BAA4B,WACxBmE,UAAY3C,SAASC,cAAcnE,kBAAkBY,sBACtDiG,UAAW,OAGhBA,UAAUxB,iBAAiBrF,mBAAmBK,iBAAiByG,SAAQvC,WACnEA,SAASwC,iBAAiB,SAAUzB,sBAIxCuB,UAAUxB,iBAAiBrF,mBAAmBQ,cAAcsG,SAAQvC,WAChEA,SAASwC,iBAAiB,SAAUrB,0BAIxCmB,UAAUxB,iBAAiBrF,mBAAmBO,cAAcuG,SAAQd,SAChEA,OAAOe,iBAAiB,SAAS3F,MAAAA,UACvB0E,KAAOP,EAAEC,OAAOC,QAAQzF,kBAAkBW,YAC1CiE,QAAUI,SAASc,KAAKjB,QAAQD,SAChCJ,cAAgBsB,KAAK3B,cAAcnE,mBAAmBK,sBApLnDe,OAAOwD,QAASmB,MAAOC,gBAClCgB,aAAehB,OAAOvD,UAC5BuD,OAAOvD,UAAY,wCACnBuD,OAAOf,UAAW,YAGR9B,SAAW,IAAIC,SACrBD,SAASE,OAAO,UAAWuB,SAC3BzB,SAASE,OAAO,QAAS0C,MAAQ,EAAI,GACrC5C,SAASE,OAAO,aAAcvC,YAC9BqC,SAASE,OAAO,UAAWR,EAAEU,IAAIC,SACjCL,SAASE,OAAO,eAAgB6C,KAAKC,UAAUtF,kBAAkBY,gBAE3DgC,eAAiBC,gBAASb,EAAEU,IAAII,yDAAwD,CAC1FC,OAAQ,OACRC,KAAMV,WAGJiD,aAAe3C,SAASO,WACzBoC,OAAO9E,aACF,IAAIyC,MAAMqC,OAAOnD,SAAWJ,EAAEC,KAAKC,WAAW,iBAAkB,qCAGpE+C,KAAOE,OAAOP,QAAQzF,kBAAkBW,YAC1CmF,OAEAjF,kBAAkBY,QAAUZ,kBAAkBY,QAAQ6E,QAClDzE,QAAUA,OAAO+C,UAAYI,SAASJ,WAE1CkB,KAAKmB,SACL/B,8BAGJtF,aAAa8G,gBAAgB,CACzBzD,QAASmD,OAAOnD,SAAWJ,EAAEC,KAAKC,WAAW,qBAAsB,8BACnE4D,KAAM,YAGZ,MAAOhE,OACLqD,OAAOvD,UAAYuE,aACnBhB,OAAOf,UAAW,EAClBrF,aAAaoD,UAAUL,SA4IbuE,CAAatC,QAASJ,cAAcG,QAASY,EAAEC,oBAKvDL,kBAAoB0B,UAAU1C,cAAcnE,mBAAmBS,gBACjE0E,mBACAA,kBAAkB4B,iBAAiB,QAASpB,uBAIhDzB,SAASmB,iBAAiBrF,kBAAkBW,YAAYmG,SAAQhB,OAC5DxB,2BAA2BwB,gBA4B5B,CACHqB,KAzBS/F,MAAAA,WACTN,WAAawC,MACb1C,iBAAmBsD,SAASC,cAAcnE,kBAAkBY,mBACvDA,6BACDgC,QAAQD,MAAM,qCAIZyE,eAAiBlD,SAASC,cAAcnE,mBAAmBE,oBAC3D2G,UAAY3C,SAASC,cAAcnE,mBAAmBG,qBAExDiH,gBAAkBP,WAClBQ,EAAER,WAAWS,GAAG,qBAAqBlG,UAC5BP,wBAGKM,6BAFA+B,wBAAwBpC,qBAOpCoC,wBAAwBpC"}