{"version":3,"file":"preview_old.min.js","sources":["../src/preview_old.js"],"sourcesContent":["define(['core/notification', 'core/str', 'core/templates', 'core/ajax'], function(Notification, Str, Templates, Ajax) {\n    const Selectors = {\n        sections: {\n            bulkCreation: '#id_runnowheader',\n            individualCreation: '#id_individualcreationheader'\n        },\n        controls: {\n            bulkForce: '#id_force',\n            individualForce: '.force-create',\n            bulkCreate: '#id_runnow',\n            createSingle: '.create-single',\n            courseSelect: '.course-select',\n            createSelected: '.create-selected'\n        },\n        regions: {\n            previewGrid: '.course-grid',\n            courseCard: '.course-preview-card',\n            previewContainer: '#evento-preview-content'\n        }\n    };\n\n    let cachedPreviewData = null;\n\n    const init = async (categoryId) => {\n        // Get reference to existing preview container in form\n        previewContainer = document.querySelector(Selectors.regions.previewContainer);\n        if (!previewContainer) {\n            console.error('Preview container not found in form');\n            return;\n        }\n\n        // Initialize form section toggling\n        const previewSection = document.querySelector(Selectors.sections.individualCreation);\n        if (previewSection) {\n            // Let Moodle handle the section toggle\n            const observer = new MutationObserver((mutations) => {\n                mutations.forEach((mutation) => {\n                    if (mutation.type === 'attributes' && mutation.attributeName === 'class') {\n                        const isCollapsed = previewSection.classList.contains('collapsed');\n                        if (!isCollapsed && !cachedPreviewData) {\n                            loadPreviewInBackground(categoryId).then(() => {\n                                renderPreviewContent();\n                            });\n                        }\n                    }\n                });\n            });\n\n            observer.observe(previewSection, {\n                attributes: true\n            });\n        }\n\n        // Initialize bulk creation button\n        document.querySelector(Selectors.controls.bulkCreate)?.addEventListener('click', (e) => {\n            e.preventDefault();\n            if (typeof runBulkCreation === 'function') {\n                runBulkCreation(categoryId);\n            }\n        });\n\n        // Start background loading of preview data\n        loadPreviewInBackground(categoryId);\n    };\n\n    const loadPreviewInBackground = async (categoryId) => {\n        try {\n            const formData = new FormData();\n            formData.append('categoryid', categoryId);\n            formData.append('sesskey', M.cfg.sesskey);\n            \n            const response = await fetch(`${M.cfg.wwwroot}/local/eventocoursecreation/preview.php`, {\n                method: 'POST',\n                body: formData\n            });\n            \n            cachedPreviewData = await response.json();\n            return cachedPreviewData;\n        } catch (error) {\n            console.error('Background preview load failed:', error);\n            return null;\n        }\n    };\n\n    const updateCourseSelectionState = (checkbox, container, course) => {\n        const createSelectedBtn = container.querySelector(Selectors.controls.createSelected);\n        const forceCheckbox = container.querySelector(`#force-${checkbox.value}`);\n        const isForced = forceCheckbox?.checked || false;\n\n        if (!course.canCreate && !isForced) {\n            checkbox.checked = false;\n            checkbox.disabled = true;\n        } else {\n            checkbox.disabled = false;\n        }\n\n        const selectedCount = container.querySelectorAll(`${Selectors.controls.courseSelect}:checked`).length;\n        createSelectedBtn.disabled = selectedCount === 0;\n    };\n\n    const createCourse = async (eventId, force, button, categoryId) => {\n        const originalText = button.innerHTML;\n        button.innerHTML = '<i class=\"fa fa-spinner fa-spin\"></i>';\n        button.disabled = true;\n\n        try {\n            const formData = new FormData();\n            formData.append('eventid', eventId);\n            formData.append('force', force ? 1 : 0);\n            formData.append('categoryid', categoryId);\n            formData.append('sesskey', M.cfg.sesskey);\n            \n            const response = await fetch(`${M.cfg.wwwroot}/local/eventocoursecreation/create_course.php`, {\n                method: 'POST',\n                body: formData\n            });\n            \n            const result = await response.json();\n            if (!result.status) {\n                throw new Error(result.message || M.util.get_string('creationfailed', 'local_eventocoursecreation'));\n            }\n\n            const card = button.closest(Selectors.regions.courseCard);\n            if (card) {\n                card.remove();\n                updateBulkButtons();\n            }\n            \n            Notification.addNotification({\n                message: result.message || M.util.get_string('creationsuccessful', 'local_eventocoursecreation'),\n                type: 'success'\n            });\n\n        } catch (error) {\n            button.innerHTML = originalText;\n            button.disabled = false;\n            Notification.exception(error);\n        }\n    };\n\n    const createMultipleCourses = async (courses, button, categoryId) => {\n        button.innerHTML = `<i class=\"fa fa-spinner fa-spin\"></i> ${M.util.get_string('creating', 'local_eventocoursecreation')}`;\n        button.disabled = true;\n\n        const results = [];\n        for (const course of courses) {\n            const formData = new FormData();\n            formData.append('eventid', course.eventId);\n            formData.append('force', course.force ? 1 : 0);\n            formData.append('categoryid', categoryId);\n            formData.append('sesskey', M.cfg.sesskey);\n\n            try {\n                const response = await fetch(`${M.cfg.wwwroot}/local/eventocoursecreation/create_course.php`, {\n                    method: 'POST',\n                    body: formData\n                });\n                const result = await response.json();\n                results.push({ status: result.status, message: result.message });\n            } catch (error) {\n                results.push({ status: false, message: error.message });\n            }\n        }\n\n        const successful = results.filter(r => r.status).length;\n        const failed = results.length - successful;\n\n        if (successful > 0) {\n            Notification.addNotification({\n                message: M.util.get_string('creationsuccessfulcount', 'local_eventocoursecreation', successful),\n                type: 'success'\n            });\n        }\n        if (failed > 0) {\n            Notification.addNotification({\n                message: M.util.get_string('creationfailedcount', 'local_eventocoursecreation', failed),\n                type: 'error'\n            });\n        }\n\n        renderPreviewContent();\n    };\n\n    const renderPreviewContent = async () => {\n        if (!previewContainer) {\n            console.error('Preview container not initialized');\n            return;\n        }\n    \n        try {\n            if (!cachedPreviewData?.courses?.length) {\n                const noCoursesString = await Str.get_string('nocoursestocreate', 'local_eventocoursecreation');\n                previewContainer.innerHTML = `\n                    <div class=\"alert alert-info\">\n                        <i class=\"fa fa-info-circle\"></i> ${noCoursesString}\n                    </div>`;\n                return;\n            }\n    \n            // Prepare data for template\n            const templateContext = {\n                courses: cachedPreviewData.courses.map(course => ({\n                    ...course,\n                    warnings: Array.isArray(course.warnings) ? course.warnings : []\n                })),\n                str: {\n                    select: await Str.get_string('select', 'local_eventocoursecreation'),\n                    force: await Str.get_string('forcecreation', 'local_eventocoursecreation'),\n                    create: await Str.get_string('runnow', 'local_eventocoursecreation'),\n                    createselected: await Str.get_string('createselected', 'local_eventocoursecreation'),\n                    coursecreated: await Str.get_string('coursecreated', 'local_eventocoursecreation'),\n                    coursealreadyexists: await Str.get_string('coursealreadyexists', 'local_eventocoursecreation'),\n                    creationnotenabled: await Str.get_string('creationnotenabled', 'local_eventocoursecreation'),\n                    creationnotallowed: await Str.get_string('creationnotallowed', 'local_eventocoursecreation'),\n                    outsidecreationperiod: await Str.get_string('outsidecreationperiod', 'local_eventocoursecreation')\n                }\n            };\n    \n            const template = await Templates.render('local_eventocoursecreation/preview_grid', templateContext);\n            previewContainer.innerHTML = template;\n    \n            // Initialize event handlers for newly rendered content\n            initializePreviewHandlers();\n        } catch (error) {\n            console.error('Error rendering preview content:', error);\n            Notification.exception(error);\n        }\n    };\n\n    const initializePreviewHandlers = () => {\n        // Add handlers for checkboxes, force toggles, and create buttons\n        previewContainer.querySelectorAll(Selectors.controls.courseSelect).forEach(checkbox => {\n            checkbox.addEventListener('change', (e) => {\n                const course = cachedPreviewData.courses.find(c => c.eventId === e.target.value);\n                updateCourseSelectionState(e.target, previewContainer, course);\n            });\n        });\n\n        previewContainer.querySelectorAll(Selectors.controls.individualForce).forEach(checkbox => {\n            checkbox.addEventListener('change', (e) => {\n                const courseSelect = previewContainer.querySelector(`#select-${e.target.id.split('-')[1]}`);\n                const course = cachedPreviewData.courses.find(c => c.eventId === courseSelect.value);\n                updateCourseSelectionState(courseSelect, previewContainer, course);\n            });\n        });\n    };\n\n    return {\n        init: init\n    };\n});"],"names":["define","Notification","Str","Templates","Ajax","Selectors","bulkCreation","individualCreation","bulkForce","individualForce","bulkCreate","createSingle","courseSelect","createSelected","previewGrid","courseCard","previewContainer","cachedPreviewData","loadPreviewInBackground","async","formData","FormData","append","categoryId","M","cfg","sesskey","response","fetch","wwwroot","method","body","json","error","console","updateCourseSelectionState","checkbox","container","course","createSelectedBtn","querySelector","forceCheckbox","value","isForced","checked","canCreate","disabled","selectedCount","querySelectorAll","length","renderPreviewContent","_cachedPreviewData","courses","_cachedPreviewData$co","noCoursesString","get_string","innerHTML","templateContext","map","warnings","Array","isArray","str","select","force","create","createselected","coursecreated","coursealreadyexists","creationnotenabled","creationnotallowed","outsidecreationperiod","template","render","initializePreviewHandlers","exception","forEach","addEventListener","e","find","c","eventId","target","id","split","init","document","previewSection","MutationObserver","mutations","mutation","type","attributeName","classList","contains","then","observe","attributes","preventDefault","runBulkCreation"],"mappings":"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"}